
4. String
	- charAt -> str[0]	s.at(0)
	- to_string(<int>)
	- sort(str.begin(),str.end())		// sort in place
	- substr(<st idx>, <strlen>)
	- replace(s.begin(),s.end(), orig, new)
	- append char
		- str+=c
		- s = char(val)+s
	- check is alpha
		- isalpha(s[I]).  isalnum(s[I])
	- convert to lowercase:
		- tolower(int c) //can be a char
str.erase(std::remove(str.begin(), str.end(), 'a'), str.end());
	- split string:
		- strtok(char *, char delimit)
		- returns a pointer to the first token found in the string. 
		A null pointer is returned if there are no tokens left to retrieve.



1. Int a[5] = {}    	//initial with 0
2. fill(a,a+5,-1) 		//fill array with -1
3. memset(*pt, value, size)
4. int_64t
	- signed integer type with exactly 64 bits
   long (long int):
   	-  a signed integer type with at least 32 bits (depends on the platform)
5. modifier
	- signed
	- unsigned
	- long
	- short
6. type qualifier
	- const: cannot be changed later in execution
	- volatile: The modifier volatile tells the compiler that a variable's value may be 
	changed in ways not explicitly specified by the program.
	
	
1. Pointer: Node* left;
	when called: node.left

* struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
2. Math c++
	- abs: abs
	- min: min
	- max: max
	- INT_MAX,INT_MIN, 
3. Object & class
	- Object obj;   	// auto declare space, auto dot
	- Object* obj = new Object()	// get a pointer, dynamic initialize, must call delete later to release memory, 

4. memory management:
	- local variables are all on the stack
	- dynamically allocated memory will be assigned on heap
	- example:
		- assign new memory on heap: double* pt = new double;
		- assign value for pointer: *pt = 5: store value 5 on allocated memory
		- release memory: delete pt

5. namespace: used to declare variables/functions in different scope(if same name)
	using namespace std;

	// first name space
	namespace first_space {
	   void func() {
	      cout << "Inside first_space" << endl;
	   }
	}

	// second name space
	namespace second_space {
	   void func() {
	      cout << "Inside second_space" << endl;
	   }
	}

	int main () {
	   // Calls function from first name space.
	   first_space::func();

	   // Calls function from second name space.
	   second_space::func(); 

	   return 0;
	}
	
6. referenceÂ in cpp
	- & means give reference, can modify value outside current scope.
	
	
7. stable_sort()
	- for some elements, we want the identical value elements to be sorted by original input order. 
	in these cases we need to use stable_sort
	- 
	bool my_cmp(string a, string b) {
		int idx1 = a.find(' ')+1;
		int idx2 = b.find(' ')+1;
		if(!isdigit(a[idx1]) && !isdigit(b[idx2])) {
		    return a.substr(idx1) < b.substr(idx2);
		}else{
		    if(!isdigit(a[idx1])) return true;
		    return false;
		}
	    }

	class Solution {
	public:
	    vector<string> reorderLogFiles(vector<string>& logs) {
		stable_sort(logs.begin(), logs.end(), my_cmp); 
		return logs;
	    }

	};
	
	
